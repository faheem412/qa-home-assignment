// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by Reqnroll (https://www.reqnroll.net/).
//      Reqnroll Version:2.0.0.0
//      Reqnroll Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
using Reqnroll;
namespace CardValidation.Tests.IntegrationTests.Features
{
    
    
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Credit Card Validation API")]
    [NUnit.Framework.FixtureLifeCycleAttribute(NUnit.Framework.LifeCycle.InstancePerTestCase)]
    public partial class CreditCardValidationAPIFeature
    {
        
        private global::Reqnroll.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private static global::Reqnroll.FeatureInfo featureInfo = new global::Reqnroll.FeatureInfo(new global::System.Globalization.CultureInfo("en-US"), "IntegrationTests/Features", "Credit Card Validation API", "  As a user of the credit card validation system\n  I want to verify that the API " +
                "correctly validates various credit card inputs\n  So that only valid cards are ac" +
                "cepted", global::Reqnroll.ProgrammingLanguage.CSharp, featureTags);
        
#line 1 "CreditCardValidation.Feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public static async global::System.Threading.Tasks.Task FeatureSetupAsync()
        {
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public static async global::System.Threading.Tasks.Task FeatureTearDownAsync()
        {
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public async global::System.Threading.Tasks.Task TestInitializeAsync()
        {
            testRunner = global::Reqnroll.TestRunnerManager.GetTestRunnerForAssembly(featureHint: featureInfo);
            try
            {
                if (((testRunner.FeatureContext != null) 
                            && (testRunner.FeatureContext.FeatureInfo.Equals(featureInfo) == false)))
                {
                    await testRunner.OnFeatureEndAsync();
                }
            }
            finally
            {
                if (((testRunner.FeatureContext != null) 
                            && testRunner.FeatureContext.BeforeFeatureHookFailed))
                {
                    throw new global::Reqnroll.ReqnrollException("Scenario skipped because of previous before feature hook error");
                }
                if ((testRunner.FeatureContext == null))
                {
                    await testRunner.OnFeatureStartAsync(featureInfo);
                }
            }
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public async global::System.Threading.Tasks.Task TestTearDownAsync()
        {
            if ((testRunner == null))
            {
                return;
            }
            try
            {
                await testRunner.OnScenarioEndAsync();
            }
            finally
            {
                global::Reqnroll.TestRunnerManager.ReleaseTestRunner(testRunner);
                testRunner = null;
            }
        }
        
        public void ScenarioInitialize(global::Reqnroll.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public async global::System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async global::System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Validate Credit Card")]
        [NUnit.Framework.TestCaseAttribute("Valid Visa Card", "John Doe", "4111111111111111", "123", "12/30", "200", "10", null)]
        [NUnit.Framework.TestCaseAttribute("Valid MasterCard", "Alice Smith", "5555555555554444", "321", "11/29", "200", "20", null)]
        [NUnit.Framework.TestCaseAttribute("Valid American Express", "Bob Johnson", "378282246310005", "1234", "06/28", "200", "30", null)]
        [NUnit.Framework.TestCaseAttribute("Missing Owner", "", "4111111111111111", "123", "12/30", "400", "Owner is required", null)]
        [NUnit.Framework.TestCaseAttribute("Missing Number", "Jane Doe", "", "123", "12/30", "400", "Number is required", null)]
        [NUnit.Framework.TestCaseAttribute("Missing CVV", "Jane Doe", "4111111111111111", "", "12/30", "400", "Cvv is required", null)]
        [NUnit.Framework.TestCaseAttribute("Missing IssueDate", "Jane Doe", "4111111111111111", "123", "", "400", "Date is required", null)]
        [NUnit.Framework.TestCaseAttribute("Invalid Card Number", "Test User", "1234567890123456", "123", "12/30", "400", "Wrong number", null)]
        [NUnit.Framework.TestCaseAttribute("Invalid CVV length Visa", "Clara Wells", "4111111111111111", "12", "12/30", "400", "Wrong cvv", null)]
        [NUnit.Framework.TestCaseAttribute("Expired Card Past Date", "Expired User", "4111111111111111", "123", "01/21", "400", "Wrong date", null)]
        [NUnit.Framework.TestCaseAttribute("Owner Contains Number", "Jane 4111", "4111111111111111", "123", "12/30", "400", "Wrong owner", null)]
        [NUnit.Framework.TestCaseAttribute("Owner Contains Card Number", "John 4111111", "4111111111111111", "123", "12/30", "400", "Wrong owner", null)]
        [NUnit.Framework.TestCaseAttribute("CVV with special chars", "Jane Doe", "4111111111111111", "12@#", "12/30", "400", "Wrong cvv", null)]
        [NUnit.Framework.TestCaseAttribute("Card Number with spaces", "John Doe", "4111 1111 1111 1111", "123", "12/30", "400", "Wrong number", null)]
        [NUnit.Framework.TestCaseAttribute("Invalid CVV and Date Format", "John Doe", "4111111111111111", "12", "99-99", "400", "{\"Cvv\":[\"Wrong cvv\"],\"Date\":[\"Wrong date\"]}", null)]
        [NUnit.Framework.TestCaseAttribute("Invalid Owner and CVV", "John 123", "4111111111111111", "12", "12/30", "400", "{\"Cvv\":[\"Wrong cvv\"],\"Owner\":[\"Wrong owner\"]}", null)]
        [NUnit.Framework.TestCaseAttribute("Invalid All Fields", "", "123456", "abc", "invalid", "400", "{\"Cvv\":[\"Wrong cvv\"],\"Date\":[\"Wrong date\"],\"Owner\":[\"Owner is required\"],\"Number\"" +
            ":[\"Wrong number\"]}", null)]
        public async global::System.Threading.Tasks.Task ValidateCreditCard(string testCaseName, string owner, string number, string cvv, string issueDate, string expectedStatus, string expectedResult, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("TestCaseName", testCaseName);
            argumentsOfScenario.Add("Owner", owner);
            argumentsOfScenario.Add("Number", number);
            argumentsOfScenario.Add("Cvv", cvv);
            argumentsOfScenario.Add("IssueDate", issueDate);
            argumentsOfScenario.Add("ExpectedStatus", expectedStatus);
            argumentsOfScenario.Add("ExpectedResult", expectedResult);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Validate Credit Card", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 7
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                global::Reqnroll.Table table1 = new global::Reqnroll.Table(new string[] {
                            "Owner",
                            "Number",
                            "Cvv",
                            "IssueDate"});
                table1.AddRow(new string[] {
                            string.Format("{0}", owner),
                            string.Format("{0}", number),
                            string.Format("{0}", cvv),
                            string.Format("{0}", issueDate)});
#line 9
    await testRunner.GivenAsync("I prepare a credit card with:", ((string)(null)), table1, "Given ");
#line hidden
#line 13
    await testRunner.WhenAsync("I send the card to the validation API", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 14
    await testRunner.ThenAsync(string.Format("the response status should be {0}", expectedStatus), ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 15
    await testRunner.AndAsync(string.Format("the response body should be \"{0}\"", expectedResult), ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
    }
}
#pragma warning restore
#endregion
