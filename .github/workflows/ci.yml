name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  DOCKER_IMAGE_NAME: card-validation-app
  ALLURE_HISTORY_PATH: allure-history

jobs:
  test:
    runs-on: ubuntu-latest
    name: Build and Test

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Prepare unified reports directory
      run: |
        rm -rf unified-reports
        mkdir -p unified-reports
    - name: Build test image (runs tests in Dockerfile)
      run: |
        docker build --target test -t card-validation-tests .
    - name: Extract test results from test container image
      run: |
        docker create --name test-runner card-validation-tests
        docker cp test-runner:/app/test-results ./test-results
        docker cp test-runner:/app/allure-results ./allure-results
        docker rm test-runner
    - name: Install ReportGenerator
      if: always()
      run: |
        dotnet tool install -g dotnet-reportgenerator-globaltool
        echo "$HOME/.dotnet/tools" >> $GITHUB_PATH
    - name: Generate HTML Coverage Report
      if: always()
      run: |
        # Changed to look for 'coverage.xml' directly in 'test-results/'
        if [ -f "test-results/coverage.xml" ]; then
          reportgenerator \
            "-reports:test-results/coverage.xml" \ # Corrected filename
            "-targetdir:unified-reports/coverage-report" \
            "-reporttypes:Html;JsonSummary" \
            "-sourcedirs:./CardValidation.Core;./CardValidation.Web" \
            -verbosity:Warning
        else
          mkdir -p unified-reports/coverage-report
          echo "<html><body><h1>No Coverage Data Found</h1><p>Coverage data was not generated during test execution, or the expected XML file (coverage.xml) was not found.</p></body></html>" > unified-reports/coverage-report/index.html
        fi
    - name: Load Allure Report history (safe)
      if: always()
      run: |
        git clone --depth 1 --branch gh-pages https://github.com/${{ github.repository }} gh-pages || echo "No gh-pages branch yet"
        rm -rf gh-pages/.git
    - name: Build Allure Report
      uses: simple-elf/allure-report-action@v1.7
      if: always()
      with:
        gh_pages: gh-pages
        allure_history: ${{ env.ALLURE_HISTORY_PATH }}
        allure_results: allure-results

    - name: Publish Allure Report
      uses: peaceiris/actions-gh-pages@v3
      if: always()
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_branch: gh-pages
        publish_dir: ${{ env.ALLURE_HISTORY_PATH }}

    - name: Upload Allure Report Artifact
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: allure-report
        path: ${{ env.ALLURE_HISTORY_PATH }}

    - name: Prepare unified reports (for other artifacts)
      if: always()
      run: |
        if [ -f "test-results/all-tests.trx" ]; then
          cp "test-results/all-tests.trx" "unified-reports/"
        fi
    - name: Upload unified test reports
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: other-test-reports
        path: unified-reports/
        if-no-files-found: warn

    - name: Build production image
      if: success()
      run: |
        docker build --target final -t ${{ env.DOCKER_IMAGE_NAME }} .
    - name: Login to Docker Hub
      if: success() && github.ref == 'refs/heads/main'
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Push to Docker Hub
      if: success() && github.ref == 'refs/heads/main'
      run: |
        docker tag ${{ env.DOCKER_IMAGE_NAME }} ${{ secrets.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}:latest
        docker tag ${{ env.DOCKER_IMAGE_NAME }} ${{ secrets.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}:${{ github.sha }}
        docker push ${{ secrets.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}:latest
        docker push ${{ secrets.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}:${{ github.sha }}